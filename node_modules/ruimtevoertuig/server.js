const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');

const app = express();
const PORT = 3000;

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static('public'));

let spacecraftState = {
    batteryPercentage: 85,
    activeSensors: ["Temperature", "Camera"],
    discoveredResources: ["Iron Ore", "Silver"],
    movement: "stationary",
    sleepMode: false,
    temperature: generateRandomTemp(),
    lastResource: null
};

function generateRandomTemp() {
    return Math.floor(Math.random() * 100) - 20; // -20 to 80 degrees
}

function discoverRandomResource() {
    const resources = ['Gold', 'Silver', 'Iron Ore', 'Platinum', 'Diamond'];
    return resources[Math.floor(Math.random() * resources.length)];
}

app.get('/status', (req, res) => {
    res.json({
        batteryPercentage: spacecraftState.batteryPercentage,
        activeSensors: spacecraftState.activeSensors,
        discoveredResources: spacecraftState.discoveredResources,
        movement: spacecraftState.movement,
        sleepMode: spacecraftState.sleepMode
    });
});

app.post('/action', (req, res) => {
    const { actionType, actionDetails } = req.body;

    switch (actionType) {
        case 'move_forward':
            if (spacecraftState.batteryPercentage >= 10) {
                spacecraftState.movement = 'moving forward';
                spacecraftState.batteryPercentage -= 10;
            }
            break;
        case 'move_backward':
            if (spacecraftState.batteryPercentage >= 10) {
                spacecraftState.movement = 'moving backward';
                spacecraftState.batteryPercentage -= 10;
            }
            break;
        case 'rotate':
            spacecraftState.movement = `rotating ${actionDetails}`;
            break;
        case 'sensor':
            if (spacecraftState.activeSensors.includes(actionDetails)) {
                spacecraftState.activeSensors = spacecraftState.activeSensors.filter(
                    sensor => sensor !== actionDetails
                );
            } else {
                spacecraftState.activeSensors.push(actionDetails);
            }
            break;
        case 'sleep':
            spacecraftState.sleepMode = !spacecraftState.sleepMode;
            if (spacecraftState.sleepMode) {
                spacecraftState.batteryPercentage = 95;
            }
            break;
        case 'recharge':
            spacecraftState.batteryPercentage = Math.min(100, spacecraftState.batteryPercentage + 25);
            break;
    }

    res.json({
        message: 'Action executed successfully',
        newState: spacecraftState
    });
});

app.listen(PORT, () => {
    console.log(`Spacecraft server running at http://localhost:${PORT}`);
});
